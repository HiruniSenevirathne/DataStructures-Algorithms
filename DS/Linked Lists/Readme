Linked Lists

* Lists vs Linked Lists
    - Linked lists does not have indexes
    - Linked list have a variable called head and points to first node
    - Linked list have a tail which points to the last item
    - Each node points to next and last item points to none
    - Nodes spread out in different places in memory
    - Lists are all in a continuous place in memory

* Big O
    * Append a new node
        - O(1)
    * Remove the last
        - O(n)
            Because we have to get the pointer of last item
    * Add item to the front
        - O(1)
    * Remove first item
        - O(1)
    * Add/remove to middle
        - O(n)

* Node
    - Value + Pointer
    - It's a dictionary
        {
            value:'4',
            next: none
        }

        head:{
            value:1,
            next:{
                value:2,
                next:{
                    value:3,
                    next:{}
                }
            }
        }

* Constructors

def__init__(self,value)
    * Create new node

def append(self,value)
    * Create new node
    * Add node to end

def prepend(self,value)
    * Create new node
    * Add node to begining

def insert(self,index,value)
    * Create new node
    * Insert node

* Applications of Linked Lists
    * Polynomial Manipulation representation
    * Addition of long positive integers
    * Representation of sparse matrices
    * Addition of long positive integers
    * Symbol table creation
    * Mailing list
    * Memory management
    * Linked allocation of files
    * Multiple precision arithmetic etc